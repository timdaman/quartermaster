from typing import Dict, Tuple

from django.contrib import admin
from django.db import models
# Create your models here.
from django.utils.functional import lazy

from data.models import Pool
from .config import TEAMCITY, TEAMCITY_HOST


def available_shared_resources() -> Dict:
    url = f"{TEAMCITY_HOST}/app/rest/2018.1/projects/id:_Root/projectFeatures/?locator=type:JetBrains.SharedResources&fields=projectFeature(href,properties(*))"
    response = TEAMCITY.get(url, headers={'Accept': 'application/json'})
    if response.status_code != 200:
        raise ConnectionError(f"Error encountered look for available shared resources")

    available = {}
    for shared_resource in response.json()['projectFeature']:
        for prop in shared_resource['properties']['property']:
            if prop['name'] == 'name':
                available[prop['value']] = shared_resource['href']
                break
    return available


def share_resource_choices() -> Tuple[str, str]:
    available = available_shared_resources()
    return sorted(list((name, name) for name, href in available.items()))


class TeamCityPool(models.Model):
    """
    A pool is a collection fo resources that a reasonably similar
    They can optionally be associated with a TeamCity Shared Resource
    """

    shared_resource_url = models.URLField(unique=True, blank=True, null=True,
                                          help_text="Autogenerated from name, will be lost")
    name = models.SlugField(blank=False, null=False, primary_key=True, choices=lazy(share_resource_choices, list)())
    pool = models.OneToOneField(Pool, blank=False, null=True, on_delete=models.CASCADE)

    def save(self, force_insert=False, force_update=False, using=None,
             update_fields=None):
        self.get_teamcity_url()
        super().save(force_insert, force_update, using, update_fields)

    def clean(self):
        self.get_teamcity_url()

    def get_teamcity_url(self):
        # Hack to make unitests work
        if self.name.startswith("UNIT_TESTING_POOL"):
            self.shared_resource_url = f"http://example.com/{self.name}"
            return
        available = available_shared_resources()
        self.shared_resource_url = TEAMCITY_HOST + available[self.name]
        return

    def __str__(self):
        return self.name



class TeamCityPoolAdmin(admin.ModelAdmin):
    # Making read only because shared_resource_url is auto generated 
     readonly_fields = ('shared_resource_url',)


admin.site.register(TeamCityPool, TeamCityPoolAdmin)
