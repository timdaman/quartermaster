# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "geerlingguy/ubuntu1804"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "shell", inline: <<-SHELL

     # Based on the directions form here
     # https://blog.gimx.fr/dummy_hcd/
     # https://www.collabora.com/news-and-blog/blog/2019/02/18/modern-usb-gadget-on-linux-and-how-to-integrate-it-with-systemd-part-1/exit
     whoami
     pwd
     apt-get update
     apt install -y bc libncurses5-dev linux-source libssl-dev libconfig-dev
     [ -d linux-source-* ] || tar -xjf /usr/src/linux-source-*.tar.bz2
     cd linux-source-*
     cp /boot/config-* .config
     cp  /usr/src/linux-headers-*/Module.symvers .
     yes $'\n' | make oldconfig
     sed -ie 's/# CONFIG_USB_DUMMY_HCD is not set/CONFIG_USB_DUMMY_HCD=m/' .config
     make prepare
     make scripts
     # EXTRAVERSION and SUBLEVEL are hacks to make module is loadable. Not sure if there is a better way
     EXTRAVERSION=$(uname -r | sed -E  's/[0-9.]+//' | tr -d '\n')
     SUBLEVEL=$(uname -r | cut -d '.' -f 3 | cut -d '-' -f 1 | tr -d '\n')
     sed -ie "s/^EXTRAVERSION =.*/EXTRAVERSION = $EXTRAVERSION/" Makefile
     sed -ie "s/^SUBLEVEL = .*/SUBLEVEL = $SUBLEVEL/" Makefile
     rm -f drivers/usb/gadget/udc/dummy_hcd.ko
     make -j 4 M=drivers/usb/gadget
     cp drivers/usb/gadget/udc/dummy_hcd.ko /lib/modules/`uname -r`/kernel/drivers/usb/gadget/udc/
     echo dummy_hcd >> /etc/modules
     echo libcomposite >> /etc/modules
     modprobe libcomposite
     insmod dummy_hcd
   SHELL
end
